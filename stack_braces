

class node:
    def __init__(self,data):
        self.__data=data
        self.__next=None
    def set_next(self,next_node):
        self.__next=next_node
    def d(self):
        return self.__data
    def get_next(self):
        return self.__next
class LinkedList:
    def __init__(self):
        self.__head=None
        self.__tail=None
        
    def add(self,data):
        new_node=node(data)
        if(self.__head is None):
            self.__head=self.__tail=new_node
        else:
            new_node.set_next(self.__head)
            self.__head=new_node
    
    def display(self):
        a=''
        temp=self.__head
        while(temp is not None):
            a=a+temp.d()
            temp=temp.get_next()
        return a
       
    def pop(self):
        if self.__head is None:
            return None
        else:
            popped = self.__head.d()
            self.__head = self.__head.get_next()
            return popped

           
stack1=LinkedList()

exp=input() 

for ch in exp:
    stack1.add(ch)
def redu(exp):
    for ch in exp:  
        if (ch == ')'):  
            top=stack1.pop()  
            flag = True
            while (top != '('):  
                if (top == '+' or top == '-' or top == '*' or top == '/'):  
                    flag = False
                top = stack1.pop() 
            if (flag == True): 
                return 'Yes'
                break
        else: 
            stack1.add(ch)
    return 'No'
print(redu(exp))


 
